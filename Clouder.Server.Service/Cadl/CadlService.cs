using System.Linq;
using System.Collections.Generic;
using Clouder.Server.Contract.Service;
using Clouder.Server.Entity;
using Clouder.Server.Helper.Injection;
using Microsoft.Extensions.DependencyInjection;
using Newtonsoft.Json;
using System;
using System.Text;
using Clouder.Server.Constant;

namespace Clouder.Server.Service.Cadl
{
    public class CadlService : ICadlService, IModule
    {
        private const int indentUnit = 3; 
        private StringBuilder cadl = new StringBuilder();
        
        public string Compile(Factory factory)
        {
            factory = GetFactory();

            var nodes = GetNodes(factory.NodeSettings);
            var graph = JsonConvert.DeserializeObject<List<Edge>>(factory.Graph);

            cadl.AppendLine(Repeat(25, '/'));
            cadl.AppendLine("// This CADL script has been auto-generated by Clouder graphical designer.");
            cadl.AppendLine("// See http://cloudezine.come for details about CADL and Clouder.");
            cadl.AppendLine("// © 2019 by Cloudezine");
            cadl.AppendLine(Repeat(25, '/'));
            cadl.AppendLine();

            foreach (var database in nodes.OfType<SqlNode>())
            {
                GenerateSqlCadl(database);
            }

            foreach (var queue in nodes.OfType<QueueNode>())
            {
                GenerateQueueCadl(queue);
            }

            foreach (var code in nodes.OfType<CodeNode>())
            {
                GenerateCodeCadl(code);
            }

            foreach (var function in nodes.OfType<FunctionNode>())
            {
                function.PopulateEdges(graph, nodes);

                //output = $"{function.Id}: [{string.Join('\n', function.Connections.Select(kv => $"({kv.Key}, {kv.Value})"))}]";
                GenerateFunctionCadl(function);
            }

            return Indent();
        }

        private List<Node> GetNodes(string nodeSettings)
        {
            var baseNodes = JsonConvert.DeserializeObject<List<Node>>(nodeSettings);
            var nodeObjects = JsonConvert.DeserializeObject<List<object>>(nodeSettings);

            var nodes = new List<Node>();
            for (int i=0; i< baseNodes.Count; i++)
            {
                switch (baseNodes[i].Type)
                {
                    case "HTTP Request":
                    case "Timer Trigger":
                    case "Queue Trigger":
                        nodes.Add(JsonConvert.DeserializeObject<FunctionNode>(
                            JsonConvert.SerializeObject(nodeObjects[i])));
                        break;
                    case "Queue":
                        nodes.Add(JsonConvert.DeserializeObject<QueueNode>(
                            JsonConvert.SerializeObject(nodeObjects[i])));
                        break;
                    case "SQL":
                        nodes.Add(JsonConvert.DeserializeObject<SqlNode>(
                            JsonConvert.SerializeObject(nodeObjects[i])));
                        break;
                    case "Code":
                        nodes.Add(JsonConvert.DeserializeObject<CodeNode>(
                            JsonConvert.SerializeObject(nodeObjects[i])));
                        break;
                    case "Straight":
                    case "Orthogonal":
                        var sqlConnectionNode = JsonConvert.DeserializeObject<SqlStatementNode>(
                            JsonConvert.SerializeObject(nodeObjects[i]));
                        if (sqlConnectionNode.StatementType != null)
                        {
                            sqlConnectionNode.Type = "Sql Statement";
                            nodes.Add(sqlConnectionNode);
                        }
          
                        break;
                }
            }

            return nodes;
        }

        private void GenerateQueueCadl(QueueNode queue)
        {
            var template = GetTemplate(queue);
            cadl.Append(template
                .Replace("#database", queue.QueueName)
                .Replace("#comp-name", queue.ComponentName)
                .Replace("#size", queue.Size)
                .Replace("#cadl-help-sources", ClouderConstants.HelpUrl.Replace("#section", "datasource")));
            cadl.AppendLine();
            cadl.AppendLine();
        }

        private void GenerateSqlCadl(SqlNode database)
        {
            var template = GetTemplate(database);
            cadl.Append(template
                .Replace("#database", database.DatabaseName)
                .Replace("#comp-name", database.ComponentName)
                .Replace("#size", database.Size)
                .Replace("#sql", database.DbScript)
                .Replace("#cadl-help-sources", ClouderConstants.HelpUrl.Replace("#section", "datasource")));
            cadl.AppendLine();
            cadl.AppendLine();
        }

        private void GenerateCodeCadl(CodeNode code)
        {
            var template = GetTemplate(code);
            cadl.Append(template
                .Replace("#method", code.MethodName)
                .Replace("#inputs", code.inputVariables)
                .Replace("#output", code.OutputName)
                .Replace("#body", code.Code)
                .Replace("#cadl-help-syntax", ClouderConstants.HelpUrl.Replace("#section", "syntax")));
            cadl.AppendLine();
            cadl.AppendLine();
        }

        private void GenerateFunctionCadl(FunctionNode function)
        {
            var functionBody = new StringBuilder();

            foreach (var connection in function.Connections.Values)
            {
                switch (connection.OtherNode.Type)
                {
                    case "Queue":
                        //Inward is just a triggering queue function and will
                        //be handelled via bindings
                        if (!connection.IsInward)
                        {
                            var targetQueue = connection.OtherNode as QueueNode;
                            functionBody.Append(CodeTemplates.Enqueue
                                .Replace("#queue", targetQueue.QueueName)
                                .Replace("#variable", function.InputName)
                                .Replace("#cadl-help-sources", ClouderConstants.HelpUrl.Replace("#section", "datasource")));
                        }
                        break;
                    case "SQL":
                        var database = connection.OtherNode as SqlNode;
                        var statement = connection.Via as SqlStatementNode;
                        var sqlTemplate = GetTemplate(statement);
                        functionBody.Append(sqlTemplate
                             .Replace("#output", statement.OutputName)
                             .Replace("#database", database.DatabaseName)
                             .Replace("#entity", statement.ReturnType)
                             .Replace("#sql", statement.DbScript)
                             .Replace("#cadl-help-sql", ClouderConstants.HelpUrl.Replace("#section", "sql")));
                        break;
                    case "If":
                        functionBody.Append(CodeTemplates.If
                            .Replace("#condition", (connection.OtherNode as IfNode).Condition));
                        break;
                    case "Else":
                        functionBody.Append(CodeTemplates.Else);
                        break;
                    case "End":
                        functionBody.Append(CodeTemplates.End);
                        break;
                    case "Iterate":
                        functionBody.Append(CodeTemplates.Iterate
                            .Replace("#list", (connection.OtherNode as IterateNode).List)
                            .Replace("#variable", (connection.OtherNode as IterateNode).Variable));
                        break;
                    case "Return":
                        functionBody.Append(CodeTemplates.Return
                            .Replace("#expression", (connection.OtherNode as ReturnNode).Expression));
                        break;
                    case "Variable":
                        functionBody.Append(CodeTemplates.Variable
                            .Replace("#variableName", (connection.OtherNode as VariableNode).VariableName)
                            .Replace("#definition", (connection.OtherNode as VariableNode).Definition));
                        break;
                    case "Code":
                        var method = connection.OtherNode as CodeNode;
                        var callMethodTemplate = method.HasOutput ? 
                            CodeTemplates.CallMethodWithOutput :
                            CodeTemplates.CallMethodWithoutOutput;
                        functionBody.Append(callMethodTemplate
                            .Replace("#method", method.MethodName)
                            .Replace("#inputs", method.inputVariables)
                            .Replace("#output", method.OutputName)
                            .Replace("#cadl-help-syntax", ClouderConstants.HelpUrl.Replace("#section", "syntax")));
                        break;
                }
            }

            var functionTemplate = GetTemplate(function);
            cadl.Append(functionTemplate
                .Replace("#func-name", function.FunctionName)
                .Replace("#comp-name", function.ComponentName)
                .Replace("#size", function.Size)
                .Replace("#input", function.InputName)
                .Replace("#period", function.TimerPeriod)
                .Replace("#queue", function.Queue)
                .Replace("#body", functionBody.ToString())
                .Replace("#cadl-help-func", ClouderConstants.HelpUrl.Replace("#section", "function")));

            cadl.AppendLine();
            cadl.AppendLine();
        }

        private string GetTemplate(Node node)
        {
            switch (node.Type)
            {
                case "HTTP Request": 
                    return node.HasOutputQueue() ? 
                        FunctionTemplates.ReqInQueueOutFunction :
                        FunctionTemplates.ReqInFunction;
                case "Timer Trigger":
                    return node.HasOutputQueue() ?
                        FunctionTemplates.TimerInQueueOutFunction :
                        FunctionTemplates.TimerInFunction;
                case "Queue Trigger":
                    return node.HasOutputQueue() ?
                        FunctionTemplates.QueueInQueueOutFunction :
                        FunctionTemplates.QueueInFunction;
                case "Queue":
                    return DataSourceTemplates.Queue;
                case "SQL":
                    return DataSourceTemplates.SqlDatabase;
                case "Code":
                    return (node as CodeNode).HasOutput ?
                        CodeTemplates.MethodWithOutput :
                        CodeTemplates.MethodWithoutOutput;
                case "Sql Statement":
                    var statement = node as SqlStatementNode;
                    switch (statement.StatementType)
                    {
                        case "Select": 
                            if (string.IsNullOrWhiteSpace(statement.ReturnType))
                            {
                                return SqlStatementTemplates.SelectScalar;
                            }
                            else
                            {
                                return SqlStatementTemplates.SelectEntity;
                            }
                        case "Insert":
                            if (string.IsNullOrWhiteSpace(statement.OutputName))
                            {
                                return SqlStatementTemplates.UpsertOrDeleteNoOutout;
                            }
                            else
                            {
                                return SqlStatementTemplates.InsertWithOutout;
                            }
                        default: return SqlStatementTemplates.UpsertOrDeleteNoOutout;
                    }
                default: return "";
            }
        }

        private string Indent()
        {
            var indentedCadl = new StringBuilder();
            var scopeDepth = 0;
            var indent = "";
            foreach (var line in cadl.ToString().Split(new[] { '\n' }))
            {
                var trimmed = line.Trim();

                if (trimmed.StartsWith('}') || trimmed.StartsWith(']'))
                {
                    scopeDepth--;
                    indent = Repeat(scopeDepth);
                }

                indentedCadl.Append(indent);
                indentedCadl.Append(trimmed);
                indentedCadl.AppendLine();

                if (trimmed.StartsWith('{') || trimmed.StartsWith('['))
                {
                    scopeDepth++;
                    indent = Repeat(scopeDepth);
                }
            }

            return indentedCadl.ToString();
        }

        private string Repeat(int scopeDepth, char indentChar = ' ')
        {
            var repeat = "";
            for (int i = 0; i< scopeDepth * indentUnit; i++)
            {
                repeat += indentChar;
            }

            return repeat;
        }

        private Factory GetFactory()
        {
            return new Factory
            {
                NodeSettings = "[{\"id\":\"SQLn8cDT\",\"componentName\":\"SQLn8cDT\",\"type\":\"SQL\",\"databaseName\":\"Orders\",\"dbScript\":\"table([OrderStatus]) \\n[ \\n  Id       uniqueIdentifier not null  default NewId() PRIMARY KEY, \\n  StatusId int              not null, \\n  Name     varchar(50)      not null \\n]\\n\\ninsert into (StatusId, Name) values \\n{\\n  (1, 'Pending Payment'), \\n  (2, 'Pending Receipt'), \\n  (3, 'Payment Declined'), \\n  (4, 'Processed'), \\n  (5, 'Out Of Stock') \\n} \",\"size\":\"Small\"},{\"id\":\"HTTP RequestRtD6a\",\"componentName\":\"HTTPRequestRtD6a\",\"type\":\"HTTP Request\",\"functionName\":\"processOrder\",\"inputName\":\"order\",\"size\":\"Free\"},{\"id\":\"Straighturtqe\",\"componentName\":\"Straighturtqe\",\"type\":\"Straight\",\"statementType\":\"Insert\",\"outputName\":\"order.Id\",\"dbScript\":\"insert into Hold (OrderId, Expiration) \\nselect [uniqueidentifier]@order.Id, DATEADD(minute, 5, GETDATE()) \"}]",
                Graph = "[{\"source\":\"HTTP RequestRtD6a-5\",\"target\":\"SQLn8cDT-1\",\"connection\":\"Straighturtqe\"}]"
            };
        }
    }
}
